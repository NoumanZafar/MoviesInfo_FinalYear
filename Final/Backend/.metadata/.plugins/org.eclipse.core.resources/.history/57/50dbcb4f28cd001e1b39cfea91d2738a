package com.company.movies_database.movies_database.movies_database.clips.generated;

import com.company.movies_database.movies_database.movies_database.clips.Clips;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.clips.Clips}-interface
 * representing entities of the {@code CLIPS}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedClips {
    
    /**
     * This Field corresponds to the {@link Clips} field that can be obtained
     * using the {@link Clips#getClipId()} method.
     */
    IntField<Clips, Integer> CLIP_ID = IntField.create(
        Identifier.CLIP_ID,
        Clips::getClipId,
        Clips::setClipId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Clips} field that can be obtained
     * using the {@link Clips#getMovieId()} method.
     */
    ComparableForeignKeyField<Clips, Integer, Integer, Movies> MOVIE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        Clips::setMovieId,
        Movies.MOVIE_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Clips} field that can be obtained
     * using the {@link Clips#getClipUrl()} method.
     */
    StringField<Clips, String> CLIP_URL = StringField.create(
        Identifier.CLIP_URL,
        Clips::getClipUrl,
        Clips::setClipUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the clipId of this Clips. The clipId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.CLIP_ID.
     * 
     * @return the clipId of this Clips
     */
    int getClipId();
    
    /**
     * Returns the movieId of this Clips. The movieId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.MOVIE_ID.
     * 
     * @return the movieId of this Clips
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the clipUrl of this Clips. The clipUrl field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.CLIP_URL.
     * 
     * @return the clipUrl of this Clips
     */
    String getClipUrl();
    
    /**
     * Sets the clipId of this Clips. The clipId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.CLIP_ID.
     * 
     * @param clipId to set of this Clips
     * @return       this Clips instance
     */
    Clips setClipId(int clipId);
    
    /**
     * Sets the movieId of this Clips. The movieId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.MOVIE_ID.
     * 
     * @param movieId to set of this Clips
     * @return        this Clips instance
     */
    Clips setMovieId(Integer movieId);
    
    /**
     * Sets the clipUrl of this Clips. The clipUrl field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.CLIPS.CLIP_URL.
     * 
     * @param clipUrl to set of this Clips
     * @return        this Clips instance
     */
    Clips setClipUrl(String clipUrl);
    
    /**
     * Queries the specified manager for the referenced Movies. If no such
     * Movies exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Movies> findMovieId(Manager<Movies> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Clips> {
        
        CLIP_ID  ("CLIP_ID"),
        MOVIE_ID ("MOVIE_ID"),
        CLIP_URL ("CLIP_URL");
        
        private final String columnId;
        private final TableIdentifier<Clips> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getTableId() {
            return "CLIPS";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Clips> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}