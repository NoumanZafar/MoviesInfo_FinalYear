package com.company.movies_database.movies_database.movies_database.clips.generated;

import com.company.movies_database.movies_database.movies_database.clips.Clips;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.movies_database.movies_database.movies_database.clips.Clips}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedClipsImpl implements Clips {
    
    private int clipId;
    private Integer movieId;
    private String clipUrl;
    
    protected GeneratedClipsImpl() {}
    
    @Override
    public int getClipId() {
        return clipId;
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public String getClipUrl() {
        return clipUrl;
    }
    
    @Override
    public Clips setClipId(int clipId) {
        this.clipId = clipId;
        return this;
    }
    
    @Override
    public Clips setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public Clips setClipUrl(String clipUrl) {
        this.clipUrl = clipUrl;
        return this;
    }
    
    @Override
    public Optional<Movies> findMovieId(Manager<Movies> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movies.MOVIE_ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("clipId = "  + Objects.toString(getClipId()));
        sj.add("movieId = " + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("clipUrl = " + Objects.toString(getClipUrl()));
        return "ClipsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Clips)) { return false; }
        final Clips thatClips = (Clips)that;
        if (this.getClipId() != thatClips.getClipId()) { return false; }
        if (!Objects.equals(this.getMovieId(), thatClips.getMovieId())) { return false; }
        if (!Objects.equals(this.getClipUrl(), thatClips.getClipUrl())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getClipId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Objects.hashCode(getClipUrl());
        return hash;
    }
}