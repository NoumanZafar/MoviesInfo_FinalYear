package com.company.movies_database.movies_database.movies_database.likes_dislikes.generated;

import com.company.movies_database.movies_database.movies_database.likes_dislikes.LikesDislikes;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.company.movies_database.movies_database.movies_database.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.movies_database.movies_database.movies_database.likes_dislikes.LikesDislikes}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedLikesDislikesImpl implements LikesDislikes {
    
    private int likeId;
    private Integer userId;
    private Integer movieId;
    private boolean isLike;
    
    protected GeneratedLikesDislikesImpl() {}
    
    @Override
    public int getLikeId() {
        return likeId;
    }
    
    @Override
    public OptionalInt getUserId() {
        return OptionalUtil.ofNullable(userId);
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public boolean getIsLike() {
        return isLike;
    }
    
    @Override
    public LikesDislikes setLikeId(int likeId) {
        this.likeId = likeId;
        return this;
    }
    
    @Override
    public LikesDislikes setUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public LikesDislikes setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public LikesDislikes setIsLike(boolean isLike) {
        this.isLike = isLike;
        return this;
    }
    
    @Override
    public Optional<Users> findUserId(Manager<Users> foreignManager) {
        if (getUserId().isPresent()) {
            return foreignManager.stream().filter(Users.USER_ID.equal(getUserId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Movies> findMovieId(Manager<Movies> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movies.MOVIE_ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("likeId = "  + Objects.toString(getLikeId()));
        sj.add("userId = "  + Objects.toString(OptionalUtil.unwrap(getUserId())));
        sj.add("movieId = " + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("isLike = "  + Objects.toString(getIsLike()));
        return "LikesDislikesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof LikesDislikes)) { return false; }
        final LikesDislikes thatLikesDislikes = (LikesDislikes)that;
        if (this.getLikeId() != thatLikesDislikes.getLikeId()) { return false; }
        if (!Objects.equals(this.getUserId(), thatLikesDislikes.getUserId())) { return false; }
        if (!Objects.equals(this.getMovieId(), thatLikesDislikes.getMovieId())) { return false; }
        if (this.getIsLike() != thatLikesDislikes.getIsLike()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getLikeId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUserId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Boolean.hashCode(getIsLike());
        return hash;
    }
}