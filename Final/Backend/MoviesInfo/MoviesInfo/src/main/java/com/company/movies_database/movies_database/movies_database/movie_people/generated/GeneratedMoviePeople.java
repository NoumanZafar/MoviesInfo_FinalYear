package com.company.movies_database.movies_database.movies_database.movie_people.generated;

import com.company.movies_database.movies_database.movies_database.movie_people.MoviePeople;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.company.movies_database.movies_database.movies_database.people.People;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.movie_people.MoviePeople}-interface
 * representing entities of the {@code movie_people}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMoviePeople {
    
    /**
     * This Field corresponds to the {@link MoviePeople} field that can be
     * obtained using the {@link MoviePeople#getMovieId()} method.
     */
    IntForeignKeyField<MoviePeople, Integer, Movies> MOVIE_ID = IntForeignKeyField.create(
        Identifier.MOVIE_ID,
        MoviePeople::getMovieId,
        MoviePeople::setMovieId,
        Movies.MOVIE_ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MoviePeople} field that can be
     * obtained using the {@link MoviePeople#getPersonId()} method.
     */
    IntForeignKeyField<MoviePeople, Integer, People> PERSON_ID = IntForeignKeyField.create(
        Identifier.PERSON_ID,
        MoviePeople::getPersonId,
        MoviePeople::setPersonId,
        People.PERSON_ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the movieId of this MoviePeople. The movieId field corresponds to
     * the database column
     * MOVIES_DATABASE.movies_database.movie_people.MOVIE_ID.
     * 
     * @return the movieId of this MoviePeople
     */
    int getMovieId();
    
    /**
     * Returns the personId of this MoviePeople. The personId field corresponds
     * to the database column
     * MOVIES_DATABASE.movies_database.movie_people.PERSON_ID.
     * 
     * @return the personId of this MoviePeople
     */
    int getPersonId();
    
    /**
     * Sets the movieId of this MoviePeople. The movieId field corresponds to
     * the database column
     * MOVIES_DATABASE.movies_database.movie_people.MOVIE_ID.
     * 
     * @param movieId to set of this MoviePeople
     * @return        this MoviePeople instance
     */
    MoviePeople setMovieId(int movieId);
    
    /**
     * Sets the personId of this MoviePeople. The personId field corresponds to
     * the database column
     * MOVIES_DATABASE.movies_database.movie_people.PERSON_ID.
     * 
     * @param personId to set of this MoviePeople
     * @return         this MoviePeople instance
     */
    MoviePeople setPersonId(int personId);
    
    /**
     * Queries the specified manager for the referenced Movies. If no such
     * Movies exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Movies findMovieId(Manager<Movies> foreignManager);
    
    /**
     * Queries the specified manager for the referenced People. If no such
     * People exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    People findPersonId(Manager<People> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MoviePeople> {
        
        MOVIE_ID  ("MOVIE_ID"),
        PERSON_ID ("PERSON_ID");
        
        private final String columnId;
        private final TableIdentifier<MoviePeople> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "movies_database";
        }
        
        @Override
        public String getTableId() {
            return "movie_people";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MoviePeople> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}