package com.company.movies_database.movies_database.movies_database.reviews.generated;

import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.company.movies_database.movies_database.movies_database.reviews.Reviews;
import com.company.movies_database.movies_database.movies_database.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.movies_database.movies_database.movies_database.reviews.Reviews}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedReviewsImpl implements Reviews {
    
    private int reviewId;
    private Integer userId;
    private Integer movieId;
    private BigDecimal rating;
    private String comment;
    
    protected GeneratedReviewsImpl() {}
    
    @Override
    public int getReviewId() {
        return reviewId;
    }
    
    @Override
    public OptionalInt getUserId() {
        return OptionalUtil.ofNullable(userId);
    }
    
    @Override
    public OptionalInt getMovieId() {
        return OptionalUtil.ofNullable(movieId);
    }
    
    @Override
    public Optional<BigDecimal> getRating() {
        return Optional.ofNullable(rating);
    }
    
    @Override
    public Optional<String> getComment() {
        return Optional.ofNullable(comment);
    }
    
    @Override
    public Reviews setReviewId(int reviewId) {
        this.reviewId = reviewId;
        return this;
    }
    
    @Override
    public Reviews setUserId(Integer userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public Reviews setMovieId(Integer movieId) {
        this.movieId = movieId;
        return this;
    }
    
    @Override
    public Reviews setRating(BigDecimal rating) {
        this.rating = rating;
        return this;
    }
    
    @Override
    public Reviews setComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    @Override
    public Optional<Users> findUserId(Manager<Users> foreignManager) {
        if (getUserId().isPresent()) {
            return foreignManager.stream().filter(Users.USER_ID.equal(getUserId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Movies> findMovieId(Manager<Movies> foreignManager) {
        if (getMovieId().isPresent()) {
            return foreignManager.stream().filter(Movies.MOVIE_ID.equal(getMovieId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("reviewId = " + Objects.toString(getReviewId()));
        sj.add("userId = "   + Objects.toString(OptionalUtil.unwrap(getUserId())));
        sj.add("movieId = "  + Objects.toString(OptionalUtil.unwrap(getMovieId())));
        sj.add("rating = "   + Objects.toString(OptionalUtil.unwrap(getRating())));
        sj.add("comment = "  + Objects.toString(OptionalUtil.unwrap(getComment())));
        return "ReviewsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Reviews)) { return false; }
        final Reviews thatReviews = (Reviews)that;
        if (this.getReviewId() != thatReviews.getReviewId()) { return false; }
        if (!Objects.equals(this.getUserId(), thatReviews.getUserId())) { return false; }
        if (!Objects.equals(this.getMovieId(), thatReviews.getMovieId())) { return false; }
        if (!Objects.equals(this.getRating(), thatReviews.getRating())) { return false; }
        if (!Objects.equals(this.getComment(), thatReviews.getComment())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getReviewId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUserId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getMovieId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getRating()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getComment()));
        return hash;
    }
}