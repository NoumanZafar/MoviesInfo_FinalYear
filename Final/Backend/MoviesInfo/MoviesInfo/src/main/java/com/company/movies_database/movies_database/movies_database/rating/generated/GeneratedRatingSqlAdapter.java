package com.company.movies_database.movies_database.movies_database.rating.generated;

import com.company.movies_database.movies_database.movies_database.rating.Rating;
import com.company.movies_database.movies_database.movies_database.rating.RatingImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.util.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.movies_database.movies_database.movies_database.rating.Rating}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRatingSqlAdapter implements SqlAdapter<Rating> {
    
    private final TableIdentifier<Rating> tableIdentifier;
    
    protected GeneratedRatingSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("MOVIES_DATABASE", "MOVIES_DATABASE", "RATING");
    }
    
    protected Rating apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setUserId(  getInt(resultSet, 1 + offset))
            .setMovieId( getInt(resultSet, 2 + offset))
            .setRating(  resultSet.getBigDecimal(3 + offset))
            ;
    }
    
    protected RatingImpl createEntity() {
        return new RatingImpl();
    }
    
    @Override
    public TableIdentifier<Rating> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Rating> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Rating> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}