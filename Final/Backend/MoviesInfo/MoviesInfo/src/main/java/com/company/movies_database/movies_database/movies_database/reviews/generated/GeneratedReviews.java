package com.company.movies_database.movies_database.movies_database.reviews.generated;

import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.company.movies_database.movies_database.movies_database.reviews.Reviews;
import com.company.movies_database.movies_database.movies_database.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.math.BigDecimal;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.reviews.Reviews}-interface
 * representing entities of the {@code REVIEWS}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedReviews {
    
    /**
     * This Field corresponds to the {@link Reviews} field that can be obtained
     * using the {@link Reviews#getReviewId()} method.
     */
    IntField<Reviews, Integer> REVIEW_ID = IntField.create(
        Identifier.REVIEW_ID,
        Reviews::getReviewId,
        Reviews::setReviewId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Reviews} field that can be obtained
     * using the {@link Reviews#getUserId()} method.
     */
    ComparableForeignKeyField<Reviews, Integer, Integer, Users> USER_ID = ComparableForeignKeyField.create(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        Reviews::setUserId,
        Users.USER_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Reviews} field that can be obtained
     * using the {@link Reviews#getMovieId()} method.
     */
    ComparableForeignKeyField<Reviews, Integer, Integer, Movies> MOVIE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        Reviews::setMovieId,
        Movies.MOVIE_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Reviews} field that can be obtained
     * using the {@link Reviews#getRating()} method.
     */
    ComparableField<Reviews, BigDecimal, BigDecimal> RATING = ComparableField.create(
        Identifier.RATING,
        o -> OptionalUtil.unwrap(o.getRating()),
        Reviews::setRating,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Reviews} field that can be obtained
     * using the {@link Reviews#getComment()} method.
     */
    StringField<Reviews, String> COMMENT = StringField.create(
        Identifier.COMMENT,
        o -> OptionalUtil.unwrap(o.getComment()),
        Reviews::setComment,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the reviewId of this Reviews. The reviewId field corresponds to
     * the database column Movies_database.MOVIES_DATABASE.REVIEWS.REVIEW_ID.
     * 
     * @return the reviewId of this Reviews
     */
    int getReviewId();
    
    /**
     * Returns the userId of this Reviews. The userId field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.USER_ID.
     * 
     * @return the userId of this Reviews
     */
    OptionalInt getUserId();
    
    /**
     * Returns the movieId of this Reviews. The movieId field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.MOVIE_ID.
     * 
     * @return the movieId of this Reviews
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the rating of this Reviews. The rating field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.RATING.
     * 
     * @return the rating of this Reviews
     */
    Optional<BigDecimal> getRating();
    
    /**
     * Returns the comment of this Reviews. The comment field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.COMMENT.
     * 
     * @return the comment of this Reviews
     */
    Optional<String> getComment();
    
    /**
     * Sets the reviewId of this Reviews. The reviewId field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.REVIEW_ID.
     * 
     * @param reviewId to set of this Reviews
     * @return         this Reviews instance
     */
    Reviews setReviewId(int reviewId);
    
    /**
     * Sets the userId of this Reviews. The userId field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.USER_ID.
     * 
     * @param userId to set of this Reviews
     * @return       this Reviews instance
     */
    Reviews setUserId(Integer userId);
    
    /**
     * Sets the movieId of this Reviews. The movieId field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.MOVIE_ID.
     * 
     * @param movieId to set of this Reviews
     * @return        this Reviews instance
     */
    Reviews setMovieId(Integer movieId);
    
    /**
     * Sets the rating of this Reviews. The rating field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.RATING.
     * 
     * @param rating to set of this Reviews
     * @return       this Reviews instance
     */
    Reviews setRating(BigDecimal rating);
    
    /**
     * Sets the comment of this Reviews. The comment field corresponds to the
     * database column Movies_database.MOVIES_DATABASE.REVIEWS.COMMENT.
     * 
     * @param comment to set of this Reviews
     * @return        this Reviews instance
     */
    Reviews setComment(String comment);
    
    /**
     * Queries the specified manager for the referenced Users. If no such Users
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Users> findUserId(Manager<Users> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Movies. If no such
     * Movies exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Movies> findMovieId(Manager<Movies> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Reviews> {
        
        REVIEW_ID ("REVIEW_ID"),
        USER_ID   ("USER_ID"),
        MOVIE_ID  ("MOVIE_ID"),
        RATING    ("RATING"),
        COMMENT   ("COMMENT");
        
        private final String columnId;
        private final TableIdentifier<Reviews> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Movies_database";
        }
        
        @Override
        public String getSchemaId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getTableId() {
            return "REVIEWS";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Reviews> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}