package com.company.movies_database.movies_database.movies_database.movie_images.generated;

import com.company.movies_database.movies_database.movies_database.movie_images.MovieImages;
import com.company.movies_database.movies_database.movies_database.movie_images.MovieImagesImpl;
import com.company.movies_database.movies_database.movies_database.movie_images.MovieImagesManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.AbstractManager;
import com.speedment.runtime.field.Field;

import java.util.stream.Stream;

/**
 * The generated base implementation for the manager of every {@link
 * com.company.movies_database.movies_database.movies_database.movie_images.MovieImages}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieImagesManagerImpl 
extends AbstractManager<MovieImages> 
implements GeneratedMovieImagesManager {
    
    private final TableIdentifier<MovieImages> tableIdentifier;
    
    protected GeneratedMovieImagesManagerImpl() {
        this.tableIdentifier = TableIdentifier.of("MOVIES_DATABASE", "MOVIES_DATABASE", "MOVIE_IMAGES");
    }
    
    @Override
    public MovieImages create() {
        return new MovieImagesImpl();
    }
    
    @Override
    public TableIdentifier<MovieImages> getTableIdentifier() {
        return tableIdentifier;
    }
    
    @Override
    public Stream<Field<MovieImages>> fields() {
        return MovieImagesManager.FIELDS.stream();
    }
    
    @Override
    public Stream<Field<MovieImages>> primaryKeyFields() {
        return Stream.of(
            MovieImages.IMAGE_ID
        );
    }
}