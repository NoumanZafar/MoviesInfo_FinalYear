package com.company.movies_database.movies_database.movies_database.movie_images.generated;

import com.company.movies_database.movies_database.movies_database.movie_images.MovieImages;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.movie_images.MovieImages}-interface
 * representing entities of the {@code MOVIE_IMAGES}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieImages {
    
    /**
     * This Field corresponds to the {@link MovieImages} field that can be
     * obtained using the {@link MovieImages#getImageId()} method.
     */
    IntField<MovieImages, Integer> IMAGE_ID = IntField.create(
        Identifier.IMAGE_ID,
        MovieImages::getImageId,
        MovieImages::setImageId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MovieImages} field that can be
     * obtained using the {@link MovieImages#getMovieId()} method.
     */
    ComparableForeignKeyField<MovieImages, Integer, Integer, Movies> MOVIE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        MovieImages::setMovieId,
        Movies.MOVIE_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieImages} field that can be
     * obtained using the {@link MovieImages#getImageUrl()} method.
     */
    StringField<MovieImages, String> IMAGE_URL = StringField.create(
        Identifier.IMAGE_URL,
        MovieImages::getImageUrl,
        MovieImages::setImageUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the imageId of this MovieImages. The imageId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.IMAGE_ID.
     * 
     * @return the imageId of this MovieImages
     */
    int getImageId();
    
    /**
     * Returns the movieId of this MovieImages. The movieId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.MOVIE_ID.
     * 
     * @return the movieId of this MovieImages
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the imageUrl of this MovieImages. The imageUrl field corresponds
     * to the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.IMAGE_URL.
     * 
     * @return the imageUrl of this MovieImages
     */
    String getImageUrl();
    
    /**
     * Sets the imageId of this MovieImages. The imageId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.IMAGE_ID.
     * 
     * @param imageId to set of this MovieImages
     * @return        this MovieImages instance
     */
    MovieImages setImageId(int imageId);
    
    /**
     * Sets the movieId of this MovieImages. The movieId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.MOVIE_ID.
     * 
     * @param movieId to set of this MovieImages
     * @return        this MovieImages instance
     */
    MovieImages setMovieId(Integer movieId);
    
    /**
     * Sets the imageUrl of this MovieImages. The imageUrl field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIE_IMAGES.IMAGE_URL.
     * 
     * @param imageUrl to set of this MovieImages
     * @return         this MovieImages instance
     */
    MovieImages setImageUrl(String imageUrl);
    
    /**
     * Queries the specified manager for the referenced Movies. If no such
     * Movies exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Movies> findMovieId(Manager<Movies> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MovieImages> {
        
        IMAGE_ID  ("IMAGE_ID"),
        MOVIE_ID  ("MOVIE_ID"),
        IMAGE_URL ("IMAGE_URL");
        
        private final String columnId;
        private final TableIdentifier<MovieImages> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getTableId() {
            return "MOVIE_IMAGES";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MovieImages> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}