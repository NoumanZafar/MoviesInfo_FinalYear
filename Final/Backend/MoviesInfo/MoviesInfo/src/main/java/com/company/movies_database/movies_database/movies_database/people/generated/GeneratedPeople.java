package com.company.movies_database.movies_database.movies_database.people.generated;

import com.company.movies_database.movies_database.movies_database.people.People;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.people.People}-interface
 * representing entities of the {@code people}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPeople {
    
    /**
     * This Field corresponds to the {@link People} field that can be obtained
     * using the {@link People#getPersonId()} method.
     */
    IntField<People, Integer> PERSON_ID = IntField.create(
        Identifier.PERSON_ID,
        People::getPersonId,
        People::setPersonId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link People} field that can be obtained
     * using the {@link People#getName()} method.
     */
    StringField<People, String> NAME = StringField.create(
        Identifier.NAME,
        People::getName,
        People::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link People} field that can be obtained
     * using the {@link People#getOccupation()} method.
     */
    StringField<People, String> OCCUPATION = StringField.create(
        Identifier.OCCUPATION,
        o -> OptionalUtil.unwrap(o.getOccupation()),
        People::setOccupation,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link People} field that can be obtained
     * using the {@link People#getImageUrl()} method.
     */
    StringField<People, String> IMAGE_URL = StringField.create(
        Identifier.IMAGE_URL,
        People::getImageUrl,
        People::setImageUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the personId of this People. The personId field corresponds to
     * the database column MOVIES_DATABASE.movies_database.people.PERSON_ID.
     * 
     * @return the personId of this People
     */
    int getPersonId();
    
    /**
     * Returns the name of this People. The name field corresponds to the
     * database column MOVIES_DATABASE.movies_database.people.NAME.
     * 
     * @return the name of this People
     */
    String getName();
    
    /**
     * Returns the occupation of this People. The occupation field corresponds
     * to the database column MOVIES_DATABASE.movies_database.people.OCCUPATION.
     * 
     * @return the occupation of this People
     */
    Optional<String> getOccupation();
    
    /**
     * Returns the imageUrl of this People. The imageUrl field corresponds to
     * the database column MOVIES_DATABASE.movies_database.people.IMAGE_URL.
     * 
     * @return the imageUrl of this People
     */
    String getImageUrl();
    
    /**
     * Sets the personId of this People. The personId field corresponds to the
     * database column MOVIES_DATABASE.movies_database.people.PERSON_ID.
     * 
     * @param personId to set of this People
     * @return         this People instance
     */
    People setPersonId(int personId);
    
    /**
     * Sets the name of this People. The name field corresponds to the database
     * column MOVIES_DATABASE.movies_database.people.NAME.
     * 
     * @param name to set of this People
     * @return     this People instance
     */
    People setName(String name);
    
    /**
     * Sets the occupation of this People. The occupation field corresponds to
     * the database column MOVIES_DATABASE.movies_database.people.OCCUPATION.
     * 
     * @param occupation to set of this People
     * @return           this People instance
     */
    People setOccupation(String occupation);
    
    /**
     * Sets the imageUrl of this People. The imageUrl field corresponds to the
     * database column MOVIES_DATABASE.movies_database.people.IMAGE_URL.
     * 
     * @param imageUrl to set of this People
     * @return         this People instance
     */
    People setImageUrl(String imageUrl);
    
    enum Identifier implements ColumnIdentifier<People> {
        
        PERSON_ID  ("PERSON_ID"),
        NAME       ("NAME"),
        OCCUPATION ("OCCUPATION"),
        IMAGE_URL  ("IMAGE_URL");
        
        private final String columnId;
        private final TableIdentifier<People> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "movies_database";
        }
        
        @Override
        public String getTableId() {
            return "people";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<People> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}