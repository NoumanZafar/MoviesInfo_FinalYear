package com.company.movies_database.movies_database.movies_database.likes_dislikes.generated;

import com.company.movies_database.movies_database.movies_database.likes_dislikes.LikesDislikes;
import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.company.movies_database.movies_database.movies_database.users.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.likes_dislikes.LikesDislikes}-interface
 * representing entities of the {@code LIKES_DISLIKES}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedLikesDislikes {
    
    /**
     * This Field corresponds to the {@link LikesDislikes} field that can be
     * obtained using the {@link LikesDislikes#getLikeId()} method.
     */
    IntField<LikesDislikes, Integer> LIKE_ID = IntField.create(
        Identifier.LIKE_ID,
        LikesDislikes::getLikeId,
        LikesDislikes::setLikeId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link LikesDislikes} field that can be
     * obtained using the {@link LikesDislikes#getUserId()} method.
     */
    ComparableForeignKeyField<LikesDislikes, Integer, Integer, Users> USER_ID = ComparableForeignKeyField.create(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        LikesDislikes::setUserId,
        Users.USER_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link LikesDislikes} field that can be
     * obtained using the {@link LikesDislikes#getMovieId()} method.
     */
    ComparableForeignKeyField<LikesDislikes, Integer, Integer, Movies> MOVIE_ID = ComparableForeignKeyField.create(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        LikesDislikes::setMovieId,
        Movies.MOVIE_ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link LikesDislikes} field that can be
     * obtained using the {@link LikesDislikes#getIsLike()} method.
     */
    BooleanField<LikesDislikes, Boolean> IS_LIKE = BooleanField.create(
        Identifier.IS_LIKE,
        LikesDislikes::getIsLike,
        LikesDislikes::setIsLike,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the likeId of this LikesDislikes. The likeId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.LIKE_ID.
     * 
     * @return the likeId of this LikesDislikes
     */
    int getLikeId();
    
    /**
     * Returns the userId of this LikesDislikes. The userId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.USER_ID.
     * 
     * @return the userId of this LikesDislikes
     */
    OptionalInt getUserId();
    
    /**
     * Returns the movieId of this LikesDislikes. The movieId field corresponds
     * to the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.MOVIE_ID.
     * 
     * @return the movieId of this LikesDislikes
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the isLike of this LikesDislikes. The isLike field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.IS_LIKE.
     * 
     * @return the isLike of this LikesDislikes
     */
    boolean getIsLike();
    
    /**
     * Sets the likeId of this LikesDislikes. The likeId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.LIKE_ID.
     * 
     * @param likeId to set of this LikesDislikes
     * @return       this LikesDislikes instance
     */
    LikesDislikes setLikeId(int likeId);
    
    /**
     * Sets the userId of this LikesDislikes. The userId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.USER_ID.
     * 
     * @param userId to set of this LikesDislikes
     * @return       this LikesDislikes instance
     */
    LikesDislikes setUserId(Integer userId);
    
    /**
     * Sets the movieId of this LikesDislikes. The movieId field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.MOVIE_ID.
     * 
     * @param movieId to set of this LikesDislikes
     * @return        this LikesDislikes instance
     */
    LikesDislikes setMovieId(Integer movieId);
    
    /**
     * Sets the isLike of this LikesDislikes. The isLike field corresponds to
     * the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.LIKES_DISLIKES.IS_LIKE.
     * 
     * @param isLike to set of this LikesDislikes
     * @return       this LikesDislikes instance
     */
    LikesDislikes setIsLike(boolean isLike);
    
    /**
     * Queries the specified manager for the referenced Users. If no such Users
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Users> findUserId(Manager<Users> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Movies. If no such
     * Movies exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Movies> findMovieId(Manager<Movies> foreignManager);
    
    enum Identifier implements ColumnIdentifier<LikesDislikes> {
        
        LIKE_ID  ("LIKE_ID"),
        USER_ID  ("USER_ID"),
        MOVIE_ID ("MOVIE_ID"),
        IS_LIKE  ("IS_LIKE");
        
        private final String columnId;
        private final TableIdentifier<LikesDislikes> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getTableId() {
            return "LIKES_DISLIKES";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<LikesDislikes> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}