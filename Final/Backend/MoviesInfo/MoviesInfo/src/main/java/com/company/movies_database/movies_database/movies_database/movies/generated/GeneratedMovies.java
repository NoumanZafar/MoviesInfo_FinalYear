package com.company.movies_database.movies_database.movies_database.movies.generated;

import com.company.movies_database.movies_database.movies_database.movies.Movies;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.movies_database.movies_database.movies_database.movies.Movies}-interface
 * representing entities of the {@code MOVIES}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovies {
    
    /**
     * This Field corresponds to the {@link Movies} field that can be obtained
     * using the {@link Movies#getMovieId()} method.
     */
    IntField<Movies, Integer> MOVIE_ID = IntField.create(
        Identifier.MOVIE_ID,
        Movies::getMovieId,
        Movies::setMovieId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Movies} field that can be obtained
     * using the {@link Movies#getTitle()} method.
     */
    StringField<Movies, String> TITLE = StringField.create(
        Identifier.TITLE,
        Movies::getTitle,
        Movies::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movies} field that can be obtained
     * using the {@link Movies#getReleaseDate()} method.
     */
    ComparableField<Movies, Date, Date> RELEASE_DATE = ComparableField.create(
        Identifier.RELEASE_DATE,
        o -> OptionalUtil.unwrap(o.getReleaseDate()),
        Movies::setReleaseDate,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movies} field that can be obtained
     * using the {@link Movies#getGenre()} method.
     */
    StringField<Movies, String> GENRE = StringField.create(
        Identifier.GENRE,
        o -> OptionalUtil.unwrap(o.getGenre()),
        Movies::setGenre,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movies} field that can be obtained
     * using the {@link Movies#getPosterUrl()} method.
     */
    StringField<Movies, String> POSTER_URL = StringField.create(
        Identifier.POSTER_URL,
        Movies::getPosterUrl,
        Movies::setPosterUrl,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the movieId of this Movies. The movieId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.MOVIE_ID.
     * 
     * @return the movieId of this Movies
     */
    int getMovieId();
    
    /**
     * Returns the title of this Movies. The title field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.TITLE.
     * 
     * @return the title of this Movies
     */
    String getTitle();
    
    /**
     * Returns the releaseDate of this Movies. The releaseDate field corresponds
     * to the database column
     * MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.RELEASE_DATE.
     * 
     * @return the releaseDate of this Movies
     */
    Optional<Date> getReleaseDate();
    
    /**
     * Returns the genre of this Movies. The genre field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.GENRE.
     * 
     * @return the genre of this Movies
     */
    Optional<String> getGenre();
    
    /**
     * Returns the posterUrl of this Movies. The posterUrl field corresponds to
     * the database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.POSTER_URL.
     * 
     * @return the posterUrl of this Movies
     */
    String getPosterUrl();
    
    /**
     * Sets the movieId of this Movies. The movieId field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.MOVIE_ID.
     * 
     * @param movieId to set of this Movies
     * @return        this Movies instance
     */
    Movies setMovieId(int movieId);
    
    /**
     * Sets the title of this Movies. The title field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.TITLE.
     * 
     * @param title to set of this Movies
     * @return      this Movies instance
     */
    Movies setTitle(String title);
    
    /**
     * Sets the releaseDate of this Movies. The releaseDate field corresponds to
     * the database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.RELEASE_DATE.
     * 
     * @param releaseDate to set of this Movies
     * @return            this Movies instance
     */
    Movies setReleaseDate(Date releaseDate);
    
    /**
     * Sets the genre of this Movies. The genre field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.GENRE.
     * 
     * @param genre to set of this Movies
     * @return      this Movies instance
     */
    Movies setGenre(String genre);
    
    /**
     * Sets the posterUrl of this Movies. The posterUrl field corresponds to the
     * database column MOVIES_DATABASE.MOVIES_DATABASE.MOVIES.POSTER_URL.
     * 
     * @param posterUrl to set of this Movies
     * @return          this Movies instance
     */
    Movies setPosterUrl(String posterUrl);
    
    enum Identifier implements ColumnIdentifier<Movies> {
        
        MOVIE_ID     ("MOVIE_ID"),
        TITLE        ("TITLE"),
        RELEASE_DATE ("RELEASE_DATE"),
        GENRE        ("GENRE"),
        POSTER_URL   ("POSTER_URL");
        
        private final String columnId;
        private final TableIdentifier<Movies> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getSchemaId() {
            return "MOVIES_DATABASE";
        }
        
        @Override
        public String getTableId() {
            return "MOVIES";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Movies> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}